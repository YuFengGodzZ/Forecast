一、资料来源
- GitHub 基础入门：<url id="d0k6jq6f2kq59p59ia50" type="url" status="parsed" title="Git建立本地仓库，新增文件并提交修改_哔哩哔哩_bilibili">https://www.bilibili.com/video/BV13tmfY1ERe?spm_id_from=333.788.videopod.sections&vd_source=6f14d5d55687b1d3fc726691a3395975</url>
- GitHub 项目上传实践：<url id="d0k6jq6f2kq59p59ia5g" type="url" status="parsed" title="在Github上传你第一个项目【windows系统】_哔哩哔哩_bilibili">https://www.bilibili.com/video/BV1LT411D76z/?spm_id_from=333.337.search-card.all.click&vd_source=6f14d5d55687b1d3fc726691a3395975</url>

二、实践流程
1.  GitHub 账号注册与设置 ：访问 GitHub 官网，注册账号并完善个人信息，设置头像和邮箱，方便后续项目管理和协作。
2.  本地环境配置 ：在 Windows 系统中安装 Git，配置全局用户名和邮箱，确保每次提交代码时能记录正确的身份信息。
3.  VSCode 集成开发 ：使用 VSCode 创建项目文件夹，编写代码文件，通过 Git 插件进行版本控制，方便实时查看代码变更。
4.  关联远程仓库 ：在 GitHub 上创建仓库，将本地仓库与远程仓库关联，使用 Git 命令（如 git remote add）建立连接，实现代码的远程同步。
5.  代码与笔记管理 ：将毕业论文代码上传至私有仓库，确保代码安全性和隐私性；将学习笔记整理后上传至公开仓库，分享学习经验和知识。

三、心得与体会
1.  版本控制的重要性 ：通过实践，我深刻体会到 GitHub 在代码版本控制方面的强大功能。它可以清晰地记录每一次代码的修改历史，方便团队成员追溯问题和协同开发，也便于个人对代码的迭代管理。
2.  项目管理的便捷性 ：GitHub 提供了项目管理工具，便于对任务进行跟踪和分配，提高了项目的整体管理效率。
3.  知识共享与学习 ：公开仓库为知识共享提供了良好的平台，可以与全球的开发者交流学习，获取更多的技术资源和灵感。
4.  持续学习的必要性 ：GitHub 的功能丰富且不断更新，需要持续学习才能更好地利用其功能提升工作效率。

四、GitHub 的功能亮点
1.  代码托管：提供安全可靠的代码存储服务，支持多种编程语言和项目类型。
2.  协作开发：支持多人同时参与项目开发，通过分支管理和合并请求实现高效协作。
3.  代码审查 ：提供代码审查功能，便于团队成员对代码质量进行把控。
4.  项目管理 ：集成项目管理工具，帮助团队高效管理任务和进度。
5.  社区交流 ：拥有庞大的开发者社区，便于分享知识、解决问题和参与开源项目。
